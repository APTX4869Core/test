git config --global user.name ""						输入用户名
git config --global user.email ""						输入用户email
git init												设置本地仓库
git add .												添加本地仓库所有文件至git
git commit -m ""										确认添加
git status												Git状态
git diff												Git修改
git log													Git版本检查
git reset --hard HEAD^									退回上一版本
git reset --hard 版本号									退回《版本号》所在版本
git reflog												Git所有操作版本号
git checkout -- 文件名									丢弃工作区修改
git reset HEAD file										丢弃暂存区修改
cat 文件名												linux 查看文件内容
rm 文件名												linux 删除文件
git rm 文件名											在版本库中删除文件
ssh-keygen -t rsa -C "youremail@example.com"			添加SSH Key
git remote add origin git@github.com:APTX4869Core/test	添加远程库origin于git@github.com:APTX4869Core/test
git remote rm origin									移除远程库origin
git push -u origin master								推送本地master分支到origin里并关联
git clone git@github.com:APTX4869Core/test.git			克隆远程库test到本地
git checkout -b dev										跳转并创建dev分支
git branch												查看所有分支
git merge 分支名										快速将《分支名》合并到当前分支上
git branch -d 分支名									将《分支名》删除
git log --graph											查看分支合并图
Ctrl+C													linux 终止程序
git merge --no-ff (-m "")分支名							禁用快速合并进行合并
git stash												临时储存工作现场
git stash list											被储存工作现场列表
git stash apply stash@{0}								恢复工作现场
git stash drop stash@{0}								删除工作现场
git stash pop stash@{0}									恢复并删除工作现场
git branch -D											强行删除分支而不保存
git remote -v											远程库详细情况
git branch --set-upstream-to 远程库分支名 本地库分支名	关联远程库分支与本地库分支
git checkout -b dev origin/分支名						创建远程库分支
git pull												抓取远程库分支
git tag -a 标签名 -m "" 要加标签的commit id				建立标签
git tag													查看标签
git show 标签名											查看标签信息
git tag -d												删除标签
git push origin 标签名									推送标签至远程库
git push origin :refs/tags/标签名						删除远程库标签（需先删除本地标签）